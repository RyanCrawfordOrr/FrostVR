/* Copyright (C) Siqi.Wu - All Rights Reserved
* Written by Siqi.Wu<lion547016@gmail.com>, Aug 2023
*/

#pragma once

#include "CoreMinimal.h"
#include "UObject/NoExportTypes.h"
#include "Engine/LatentActionManager.h"
#include "Components/SynthComponent.h"
#include "Sound/SoundGenerator.h"
#include "AudioResampler.h"

#if WITH_EMBEDDEDVOICECHAT

#include "EmbeddedVoiceChat/EmbeddedVoiceChatWSGroup.h"
#include "EmbeddedVoiceChat/EmbeddedVoiceChatDevice.h"

#endif

#include "EmbeddedVoiceChatChannel.h"

#include "EmbeddedVoiceChatWSGroup.generated.h"

/**
**/
UCLASS(BlueprintType, meta=(BlueprintSpawnableComponent))
class EMBEDDEDVOICECHAT_API UEmbeddedVoiceChatWSGroup : public USynthComponent {
    GENERATED_BODY()

public:
#if WITH_EMBEDDEDVOICECHAT
	std::shared_ptr<EmbeddedVoiceChat::WSGroup> EmbeddedVoiceChatWSGroup;

    std::shared_ptr<EmbeddedVoiceChat::AbstractPlaybackDevice> EmbeddedVoiceChatDevice;
#endif

	/** A volume multiplier to apply to sounds generated by this component */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Sound, meta = (DisplayAfter = "Sound"))
	float VolumeMultiplier = 1.0f;

	UEmbeddedVoiceChatWSGroup(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get());

	virtual void TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction * ThisTickFunction) override;

	virtual void BeginDestroy() override;
	virtual bool IsReadyForFinishDestroy() override;

	/**
	* please call before join any group
	**/
	UFUNCTION(BlueprintCallable, Category = "Embedded Voice Chat")
	void setIceServers(const TArray<FString> &iceServers, const int portRangeBegin, const int portRangeEnd);

	/**
	* please call before join any group
	**/
	UFUNCTION(BlueprintCallable, Category = "Embedded Voice Chat")
	void connectWSServer(const FString &wsServerURL, const TMap<FString, FString> &queryParameters, const TMap<FString, FString> &headers);

	/**
	* get channels
	**/
	UFUNCTION(BlueprintCallable, Category = "Embedded Voice Chat")
	TArray<UEmbeddedVoiceChatChannel *> getChannels();

	/**
	* get number of player in a group
	**/
	UFUNCTION(BlueprintCallable, meta = (Latent, LatentInfo = "LatentInfo", HidePin = "WorldContextObject", DefaultToSelf = "WorldContextObject"), Category = "Embedded Voice Chat")
	void getGroupSize (
			UObject *WorldContextObject,
			struct FLatentActionInfo LatentInfo,
			int &size,
			const FString &groupName = TEXT("Default")
	);

	/**
	* join a group with the specified group name
	**/
	UFUNCTION(BlueprintCallable, Category = "Embedded Voice Chat")
	void joinGroup(const FString &groupName = TEXT("Default"));

	/**
	 * leave a group with the specified group name
	**/
	UFUNCTION(BlueprintCallable, Category = "Embedded Voice Chat")
	void leaveGroup(const FString &groupName = TEXT("Default"));

	int32 OnGenerateAudio(float* OutAudio, int32 NumSamples) override;

	virtual bool Init(int32& SampleRate) override;
};
